{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red220\green161\blue13;\red0\green0\blue0;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c89412\c68627\c3922;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99971\c0;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Sources:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\fs26 \cf0  {\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/38042933/swift-3-drawing-a-rectangle"}}{\fldrslt \cf2 https://stackoverflow.com/questions/38042933/swift-3-drawing-a-rectangle}} for square draw\
\
\pard\pardeftab560\slleading20\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.appcoda.com/bezier-paths-introduction/"}}{\fldrslt \cf2 https://www.appcoda.com/bezier-paths-introduction/}} for triangle draw\
\
\pard\pardeftab560\slleading20\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/2049582/how-to-determine-if-a-point-is-in-a-2d-triangle"}}{\fldrslt \cf2 https://stackoverflow.com/questions/2049582/how-to-determine-if-a-point-is-in-a-2d-triangle}} for override contains\
\
For gesture implementation: {\field{\*\fldinst{HYPERLINK "https://www.reddit.com/r/SwiftUI/comments/lvc68q/how_do_i_structure_gestures_so_i_can_both_drag_an/"}}{\fldrslt \cf2 https://www.reddit.com/r/SwiftUI/comments/lvc68q/how_do_i_structure_gestures_so_i_can_both_drag_an/}}\cf2 \
\
Rest of sources in lab where code is added
\f0\fs24 \cf0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f2 \cf3 \cb4 \
\
Shape Implementation help from TA Katherine \
Erase and Move implementation help from TA 
\f1\fs26 \cf2 \cb1 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
\cf3 Creative Portion:\
\
1. I implemented a random color chooser to add a level of surprise and creativity to the app. When a user taps a button, it generates a random color and applies it to the currently selected shape. I added it by creating a button in my main and then implementing a function so that the random color would be generated from the color selection. Then I created an IB action to link the function to the button. The implementation was simple with help from resources like StackOverflow for the math and new functions required, which needed some minor logic, and was easier than resizing and rotating shapes. The features promotes creativity in the app and improves the user experience and engagement.\
\
2. I implemented a feature that would allow a user to take a screenshot of their artwork created with the app. When the user taps the save button, a screenshot will be taken using the screenshot function and will be saved to the users camera toll. I added this by adding a button to my main button bar and then creating an IB Action that took the screenshot. The implementation of the feature was a bit complicated because of the new UI features that I had not used before, and the fact that I had to add to integrate with iOS functionality to take the image. I added the screenshot to allow users to capture their drawings for the future, and it is meaningful because it allows users to save and share their art with others and goes beyond the drawing view.  }